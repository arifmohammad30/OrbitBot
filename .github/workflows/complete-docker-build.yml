name: Complete Docker Build and Deploy

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'backend'
        type: choice
        options:
        - backend
        - frontend
        - both

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type == 'backend' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orbitbot-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-frontend:
    runs-on: ubuntu-latest
    if: github.event.inputs.build_type == 'frontend' || github.event.inputs.build_type == 'both'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: UI/package-lock.json
      
    - name: Install dependencies
      run: |
        cd UI
        npm ci
      
    - name: Build frontend
      run: |
        cd UI
        npm run build
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./UI
        file: ./UI/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orbitbot-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: Backend/requirements.txt
      
    - name: Install dependencies
      run: |
        cd Backend
        pip install -r requirements.txt
      
    - name: Run tests
      run: |
        cd Backend
        python -m pytest tests/ -v || echo "No tests found, continuing..."

  security-scan:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orbitbot-backend:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-backend.result == 'success' && needs.build-frontend.result == 'success'
      run: |
        echo "✅ All builds completed successfully!"
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orbitbot-backend:latest"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/orbitbot-frontend:latest"
      
    - name: Notify on failure
      if: needs.build-backend.result == 'failure' || needs.build-frontend.result == 'failure'
      run: |
        echo "❌ Build failed!"
        echo "Backend build status: ${{ needs.build-backend.result }}"
        echo "Frontend build status: ${{ needs.build-frontend.result }}" 